import os
import sys
from src.logger import logging  
from src.exceptions import CustomException
from src.utils import load_objects
from dataclasses import dataclass
import pandas as pd

@dataclass
class PredictionPipelineConfig:
    preprocessor_path=os.path.join("artifacts",'perprocessor.pkl')
    model_path=os.path.join("artifacts",'model.pkl')
    features_path=os.path.join("artifacts",'features.pkl')

class PredictionPipeline:
    def __init__(self):
        self.prediction_config=PredictionPipelineConfig()

    def predict(self,features:pd.DataFrame):
        """0: Not defective
            2: Defective"""
        try:
            logging.info("Loading files")
            preprocessor=load_objects(file_path=self.prediction_config.preprocessor_path)
            model=load_objects(file_path=self.prediction_config.model_path)
            features_used=load_objects(file_path=self.prediction_config.features_path)
            logging.info("file loading completed")
            features_used=list(features_used)
            data_point=features[features_used]
            data_point=preprocessor.transform(data_point)
            logging.info("Predicting")
            data_point=data_point[:,:-1]
            p= model.predict(data_point)
            logging.info(f"prediction for the data point\n{data_point}\n is {p} ")
            return p
        except Exception as e:
            logging.info("error occured during prediction")
            raise CustomException(e,sys)


class CustomData:
    def __init__(self,data) -> None:
        self.data=data
    
    def get_data_frame(self):
        df=pd.read_csv(os.path.join("notebooks/data",'wafer.csv'))
        input_data=pd.DataFrame(data=[self.data],columns=list(df.columns))
        return input_data
    

# if __name__=="__main__":

#     input=["Wafer-802",2961.04,2506.43,2170.0666,1364.5157,1.5447,100,96.77,0.123,1.3953,0.0084,0.0062,0.9461,204.6134,0,5.1756,406.329,10.7168,0.972,193.8966,12.5531,1.4372,-5714.25,2573.5,-2819.5,-1472.75,1.3163,2.011,7.4093,71.3222,1.9889,0.1632,3.479,86.1155,8.5801,50.294,64.0748,49.7061,65.8602,86.9331,119.2266,79.31,3.331,70,357.69,10.4125,120.9055,717.3122,1.4512,150.5109,1,629.1064,227.0841,0,None,None,None,None,None,None,4.6209,353.1564,10.9223,105.5264,17.8428,15.3791,22.4441,694.8681,1.0804,152.5809,1,611.2636,95.4405,141.4404,469.8232,0,0.0263,-0.0319,0.0373,0.0095,-0.0092,0.0147,-0.068,0.0176,7.2257,0.1284,None,2.3741,0.9906,1816.1957,0.1583,8772.49,0,0.0003,-0.0013,0,0,0,0,0,0,0,0,0,-0.0093,-0.0004,0,0,0,0,None,None,None,0.4634,0.9624,0,757.1382,0.9906,58.6659,0.6016,0.9658,6.4478,15.59,4.44,15.61,15.54,1.239,2.511,0.7635,3.232,-0.1419,0.6847,0.9988,2.3499,986.0991,39.537,139,86.3,96,77.2,542.931,0.1541,0,6.86,0.0053,0.0882,0.087,0.0647,0.0257,7.2291,0,8.41,22.042,0.4588,0.0122,6.7734,0.3,0.0392,None,None,1049,478,3399,3075,0.082,0.155,0.216,1.5,1.3,0.111,0.503,0.7151,0.0325,0.2842,0.6629,0.2843,0.9018,0.2087,0.242,0,0,19.1,0.461,8.37,31.159,0.1381,6.12,0,20.83,53.404,0,None,None,None,None,None,None,4.84,20.95,0.269,7.62,19.29,4.84,3.343,31.736,0.0843,9.11,0,19.29,58.565,0,0.0616,0.0512,0.0573,0.0352,0.0727,0.1037,0.0364,0.0352,4.6083,0.0032,None,0.0288,0.0008,156.333,0.0546,827.7998,0,0.0122,0.0108,0,0,0,0,0,0,0,0,0,0.0046,0.0059,0,0,0,0,None,None,None,0.0394,0.0089,0,82.1998,0.001,3.1193,0.0297,0.0243,0.5065,0,0,0,0,0,0,0,0,0,0,0,0.0917,16.524,4.2578,30.7316,30.8476,33.1309,28.0614,152.7782,0.0573,0,2.514,0.0016,0.029,0.0227,0.0147,0.0086,2.5899,0,2.5765,6.7675,0.1332,0.004,2.5013,0.0825,0.013,None,None,435.2251,196.8849,1478.1093,1425.8147,0.0419,0.0703,0.0909,0.4711,0.454,0.038,0.1327,0.2643,0.0133,0.1036,0.235,0.1036,0.3668,0.0898,0.1041,0,0,0,5.9229,0.1263,2.4195,9.7021,0.0451,2.076,0,6.2158,15.0289,0,None,None,None,None,None,None,1.4625,6.6325,0.0769,2.2503,9.7813,1.4625,1.1516,10.0226,0.0302,2.8256,0,5.7373,19.8463,4.1085,3.4842,0,0.0186,0.0262,0.0277,0.0166,0.0222,0.0502,0.0168,0.0148,1.7182,0.001,None,0.0116,0.0003,47.2458,0.0182,279.8021,0,0.0036,0.0033,0,0,0,0,0,0,0,0,0,0.0017,0.0019,0,0,0,0,None,None,None,0.0095,0.0026,0,28.3864,0.0003,0.9856,0.0093,0.0074,0.166,0,0,0,0,0,0,0,0,0,0,0,0.0323,5.545,1.3004,6.3654,2.9145,3.8301,3.5575,39.7893,9.9768,0,7.089,4.3082,6.3213,0,0,2.7155,3.533,0,162.4921,5.4247,4.2815,1.2535,3.4933,2.3899,2.7241,18.3576,18.5739,120.5533,208.7931,6.2298,7.7076,2.9153,2.1031,65.3631,68.0054,14.4582,0.8304,0.379,0.5651,1.0346,0.572,1.3693,0.2401,0.203,0,0,0,5.3398,4.4273,6.9228,4.3439,9.5135,4.0661,0,3.311,23.5173,0,None,None,None,None,None,None,104.7413,5.9322,2.4629,7.2209,108.111,31.4713,14.8947,4.5672,7.8031,5.9706,0,3.1558,61.3628,0,233.8316,160.6275,153.5164,369.5538,785.9459,706.644,53.4901,200.2845,63.7762,2.4924,None,1.2143,0.0769,8.6077,34.4718,9.4363,0,0,851.2315,0,0,0,0,0,0,0,0,0,49.5289,0,0,0,0,0,None,None,None,8.4933,0.9223,0,10.8566,0.1008,5.3171,4.9297,2.516,7.8553,0,0,0,0,0,0,0,0,0,0,0,3.9038,1.6757,10.7691,0.1161,0.0075,0.0021,6.491,1.4404,412.458,75.006,0.5099,18.56,2.32,0.2269,7.8484,0.8557,35.4007,4.4999,3.0931,0.9811,0.4201,0.0755,42.8218,264.272,0.5671,4.98,0.0877,2.0902,0.0382,1.8844,15.4662,535.9527,2.2638,9.62,0.2673,3.2966,0.075,1.7949,11.8075,None,None,None,None,0.4994,0.0115,0.0031,2.302,0.0545,0.0184,0.0055,33.7876,1]
#     c=CustomData(input)
#     df=c.get_data_frame()
#     obj=PredictionPipeline()
#     obj.predict(df)
#     print("no error")
